{"version":3,"sources":["../server/mail.js"],"names":["service","process","env","MAIL_SERVICE","email","MAIL_EMAIL","pass","MAIL_PASSWORD","host","CLIENT_HOST","baseHost","CLIENT_BASE","transporter","createTransport","auth","user","formatPostings","code","sender_email","name","so_email","Promise","resolve","reject","formatted","mailOptions","from","to","subject","html","sendMail","error","info","console","log","response","config","then","catch","askMail"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,UAAUC,QAAQC,GAAR,CAAYC,YAA5B;AACA,IAAMC,QAAQH,QAAQC,GAAR,CAAYG,UAA1B;AACA,IAAMC,OAAOL,QAAQC,GAAR,CAAYK,aAAzB;AACA,IAAMC,OAAOP,QAAQC,GAAR,CAAYO,WAAzB;AACA,IAAMC,WAAWT,QAAQC,GAAR,CAAYS,WAA7B;;AAEA,IAAMC,cAAc,qBAAWC,eAAX,CAA2B;AAC7Cb,aAASA,OADoC;AAE7Cc,UAAM;AACJC,cAAMX,KADF;AAEJE,cAAMA;AAFF;AAFuC,CAA3B,CAApB;;AAQA,IAAMU,iBAAiB,SAAjBA,cAAiB,OAA0C;AAAA,QAAxCC,IAAwC,QAAxCA,IAAwC;AAAA,QAAlCC,YAAkC,QAAlCA,YAAkC;AAAA,QAApBC,IAAoB,QAApBA,IAAoB;AAAA,QAAdC,QAAc,QAAdA,QAAc;;AAC7D,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,YAAIC,4CACeL,IADf,oNAGwCX,OAAKS,IAH7C,UAGqDA,IAHrD,gFAK+BT,IAL/B,mDAAJ;;AAQA,YAAIiB,cAAc;AACdC,kBAAMtB,KADQ;AAEduB,gBAAIP,QAFU;AAGdQ,qBAAYT,IAAZ,yBAHc;AAIdU,kBAAML;AAJQ,SAAlB;AAMI;AACJZ,oBAAYkB,QAAZ,CAAqBL,WAArB,EAAkC,UAACM,KAAD,EAAQC,IAAR,EAAiB;AAC/C,gBAAID,KAAJ,EAAW;AACPE,wBAAQC,GAAR,CAAYH,KAAZ;AACAR,uBAAO,OAAP,EAAeQ,KAAf;AACH,aAHD,MAGO;AACHE,wBAAQC,GAAR,CAAY,iBAAiBF,KAAKG,QAAlC;AACAb,wBAAQ,IAAR;AACH;AACJ,SARD;AASH,KAzBM,CAAP;AA0BH,CA3BD;;AA6BO,IAAMQ,8BAAW,SAAXA,QAAW,CAACM,MAAD,EAAY;AAChC,WAAO,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCU,gBAAQC,GAAR,CAAY,cAAZ;AACAlB,uBAAeoB,MAAf,EACCC,IADD,CACM,eAAK;AACPf,oBAAQ,IAAR;AACH,SAHD,EAGGgB,KAHH,CAGS,eAAK;AACVf,mBAAO,qBAAP;AACH,SALD;AAMH,KARM,CAAP;AASH,CAVM;;AAYA,IAAMgB,4BAAU,SAAVA,OAAU,CAACnB,QAAD,EAAc;AACjC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCU,gBAAQC,GAAR,CAAY,cAAZ;AACC,YAAIV,4CACcJ,QADd,sFAEmBV,WAAS,OAF5B,2EAG6BA,WAAS,OAHtC,WAGiDA,WAAS,OAH1D,+CAAJ;;AAMD,YAAIe,cAAc;AACdC,kBAAMtB,KADQ;AAEduB,gBAAIP,QAFU;AAGdQ,wCAHc;AAIdC,kBAAML;AAJQ,SAAlB;AAMAZ,oBAAYkB,QAAZ,CAAqBL,WAArB,EAAkC,UAACM,KAAD,EAAQC,IAAR,EAAiB;AAC/C,gBAAID,KAAJ,EAAW;AACPE,wBAAQC,GAAR,CAAYH,KAAZ;AACAR,uBAAO,OAAP,EAAeQ,KAAf;AACH,aAHD,MAGO;AACHE,wBAAQC,GAAR,CAAY,iBAAiBF,KAAKG,QAAlC;AACAb,wBAAQ,IAAR;AACH;AACJ,SARD;AASH,KAvBM,CAAP;AAwBH,CAzBM","file":"mail.js","sourcesContent":["import nodemailer from 'nodemailer';\n\nconst service = process.env.MAIL_SERVICE\nconst email = process.env.MAIL_EMAIL\nconst pass = process.env.MAIL_PASSWORD\nconst host = process.env.CLIENT_HOST\nconst baseHost = process.env.CLIENT_BASE\n\nconst transporter = nodemailer.createTransport({\n  service: service,\n  auth: {\n    user: email,\n    pass: pass\n  }\n});\n\nconst formatPostings = ({code, sender_email, name, so_email}) => {\n    return new Promise((resolve, reject) =>{\n        let formatted = `\n            <h3>Your SO, ${name}, just took the Ring Ease quiz to make your life easier</h3>\n            <h4>Just enter the code below, or click the link to Review their answers</h4>\n            <div style=\"font-size:1.7rem\"><a href=${host+code}>${code}</a></div>\n            </br>\n            <div>Or just go here <a href=${host}>Here</a> enter the code above</div>\n        `;\n\n        let mailOptions = {\n            from: email,\n            to: so_email,\n            subject: `${name} Ring Ease selection`,\n            html: formatted,\n        };\n            // html: '<h1>Welcome</h1><p>That was easy!</p>'\n        transporter.sendMail(mailOptions, (error, info) => {\n            if (error) {\n                console.log(error);\n                reject(\"Error\",error);\n            } else {\n                console.log('Email sent: ' + info.response);\n                resolve(true);\n            }\n        });\n    })\n}\n\nexport const sendMail = (config) => {\n    return new Promise((resolve, reject) => {\n        console.log(\"Sending Mail\");\n        formatPostings(config)\n        .then(res=>{\n            resolve(true);\n        }).catch(err=>{\n            reject(\"Error sending email\");\n        })\n    })\n}   \n\nexport const askMail = (so_email) => {\n    return new Promise((resolve, reject) => {\n        console.log(\"Sending Mail\");\n         let formatted = `\n            <h3>Your SO, ${so_email}, Want's you to take the Ring Ease Quiz</h3>\n            <h2>Click <a href=${baseHost+'/quiz'}>Here</a> to start</h2>\n            <h4>Or navigate to: <a href=${baseHost+'/quiz'}>${baseHost+'/quiz'}</a> and press start quiz</div>\n        `;\n\n        let mailOptions = {\n            from: email,\n            to: so_email,\n            subject: `Ring Ease Request`,\n            html: formatted,\n        };\n        transporter.sendMail(mailOptions, (error, info) => {\n            if (error) {\n                console.log(error);\n                reject(\"Error\",error);\n            } else {\n                console.log('Email sent: ' + info.response);\n                resolve(true);\n            }\n        });\n    })\n}   "]}