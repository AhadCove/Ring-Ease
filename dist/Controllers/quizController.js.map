{"version":3,"sources":["../../server/Controllers/quizController.js"],"names":["quizController","ask","req","res","console","log","query","email","then","status","json","success","data","response","catch","message","get","code","Quiz","findOne","found","err","check","find","add","body","name","so_email","ring_color","ring_metal","ring_size","ring_type","ring_stone","ring_stone_shape","ring_stone_style","ring_stone_color","ring_choices","quiz","save","newQuiz"],"mappings":"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","file":"quizController.js","sourcesContent":["import db from '../Models';\nimport {sendMail, askMail} from '../mail';\n\nconst quizController = {};\n\nquizController.ask = (req, res) => {\n        console.log(\"Asking to send email:\", req.query.email)\n        askMail(req.query.email)\n        .then(response => {\n            console.log(\"Sent successfully\");\n                return res.status(200).json({\n                    success: true,\n                    data: response\n                });\n        }).catch(err=>{\n            console.log(\"Could not send email\");\n            return res.status(500).json({\n                message: \"Could not send email\"\n            })\n        })\n}\n\nquizController.get = (req, res) => {\n        console.log(\"Looking for ring:\", req.query.code)\n        db.Quiz.findOne({'code': req.query.code})\n        .then(found => {\n            if(found){\n                console.log(\"Successfully found ring\", found);\n                return res.status(200).json({\n                    success: true,\n                    data: found\n                });\n            } else{\n                console.log(\"Ring does not exist\");\n                return res.status(500).json({\n                    message: \"Ring does not exist\"\n                })\n            }\n        }).catch(err => {\n            console.log(\"Failed to find ring\", err);\n            return res.status(500).json({\n                message: \"Could not find ring\"\n            })\n        })\n}\n\nquizController.check = (req, res) => {\n    db.Quiz.findOne({'code': req.query.code})\n    .then(found => {\n        console.log(found, \"code\", req.query.code);\n        if(found){\n            console.log(\"Not allowed\", found)\n            return res.status(200).json({\n                success: false,\n                data: false\n            })\n        } else{\n            console.log(\"Allowed\");\n            return res.status(200).json({\n                success: true,\n                data: true\n            })\n        }\n    }).catch(err => {\n        console.log(\"Checking Error\", err);\n        return res.status(500).json({\n            message: err\n        })\n    })\n    \n}\n\nquizController.find = (req, res) => {\n    db.Quiz.findOne({'code': req.query.code})\n    .then(found => {\n        console.log(found, \"code\", req.query.code);\n        if(found){\n            console.log(\"Found the ring\")\n            return res.status(200).json({\n                success: true,\n                data: true\n            })\n        } else{\n            console.log(\"Did not Find ring\", found);\n            return res.status(500).json({\n                message: \"Could not find ring\"\n            })\n        }\n    }).catch(err => {\n        console.log(\"Checking Error\", err);\n        return res.status(500).json({\n            message: err\n        })\n    })\n    \n}\n\nquizController.add = (req, res) => {\n    const {code, name, email, so_email, ring_color, ring_metal, ring_size, ring_type, ring_stone, ring_stone_shape, ring_stone_style, ring_stone_color, ring_choices} = req.body;\n    console.log(\"Post code\", req.body);\n\n    // Validation\n    \n    const quiz = new db.Quiz({\n        code, name, email, so_email, ring_color, ring_metal, ring_size, ring_type, ring_stone, ring_stone_shape, ring_stone_style, ring_stone_color, ring_choices\n    });\n\n    quiz.save().then(newQuiz => {\n        console.log(\"Successfully posted quiz\", newQuiz );\n        const {code, email, name, so_email} = newQuiz\n        sendMail({code, email, name, so_email})\n        .then(response => {\n            console.log(\"Success\");\n            res.status(200).json({\n                success:true,\n                data: newQuiz,\n            })\n        }).catch(err => {\n            console.log(\"Failed at sending email\");\n            res.status(200).json({\n                success:false,\n                data: newQuiz,\n            })\n        })\n    }).catch(err => {\n        console.log(\"Error posting quiz\", err);\n        res.status(500).json({\n            message: err,\n        });\n    });\n}\n\nexport default quizController;"]}